{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["const MATCH_ALL = '[^/?#]*';\r\n\r\nconst CATCH_ALL = '([^/?#]+)';\r\n\r\n// optional trailing slash\r\n// only matches the slash if nothing follows\r\nconst MATCH_TRAILING_SLASH = '(?:[/]?(?=$))?';\r\n\r\n// implements '**' as a wildcard\r\nconst WILDCARD_PATTERN = /\\*\\*/g;\r\n\r\n// matches ':param' and captures 'param'\r\nconst PARAMETER_PATTERN = /:([^\\/]+)/;\r\n\r\nexport interface Compiled {\r\n  pattern: RegExp;\r\n  keys: string[];\r\n}\r\n\r\nexport const compile = (\r\n  path: string,\r\n  exact: boolean = false\r\n): Compiled => {\r\n  path = (path.split(\"#\")[0] || \"\").split(\"?\")[0];\r\n  path = path.replace(WILDCARD_PATTERN, MATCH_ALL);\r\n  let keys: string[] = [];\r\n  let match: RegExpExecArray | null;\r\n\r\n  // convert :param to a catch-all group\r\n  // and save the keys\r\n  while ((match = PARAMETER_PATTERN.exec(path)) != null) {\r\n    // match[0] is the entire segment, e. g. ':name'\r\n    path = path.replace(match[0], CATCH_ALL);\r\n    // match[1] is just the name of the parameter, e. g. 'name'\r\n    keys.push(match[1]);\r\n  }\r\n\r\n  if (!/\\/?/.test(path)) {\r\n    path += MATCH_TRAILING_SLASH;\r\n  }\r\n\r\n  path = '^' + path;\r\n  if (exact) {\r\n    path += '$';\r\n  }\r\n\r\n  const pattern = new RegExp(path, 'i');\r\n  return {\r\n    pattern,\r\n    keys\r\n  };\r\n}\r\n\r\nexport interface Executed {\r\n  [key: string]: string;\r\n}\r\n\r\ntype Dictionary<T> = { [key: string]: T };\r\n\r\nexport const execute = (\r\n  compiled: Compiled,\r\n  path: string\r\n): Executed => {\r\n  const values = (compiled.pattern.exec(path) || []).slice(1);\r\n  return compiled.keys.reduce(\r\n    (acc: Dictionary<string>, key, i) => ((acc[key] = values[i]), acc),\r\n    {}\r\n  );\r\n}\r\n"],"names":["MATCH_ALL","CATCH_ALL","MATCH_TRAILING_SLASH","WILDCARD_PATTERN","PARAMETER_PATTERN","compile","path","exact","split","replace","match","keys","exec","push","test","pattern","RegExp","execute","compiled","values","slice","reduce","acc","key","i"],"mappings":"AAAA,MAAMA,UAAY,UAEZC,UAAY,YAIZC,qBAAuB,iBAGvBC,iBAAmB,QAGnBC,kBAAoB,YAObC,QAAU,CACrBC,EACAC,GAAiB,KAGjBD,GADAA,GAAQA,EAAKE,MAAM,KAAK,IAAM,IAAIA,MAAM,KAAK,IACjCC,QAAQN,iBAxBJ,WAyBhB,IACIO,EADAC,KAKJ,KAAiD,OAAzCD,EAAQN,kBAAkBQ,KAAKN,KAErCA,EAAOA,EAAKG,QAAQC,EAAM,GAAIT,WAE9BU,EAAKE,KAAKH,EAAM,IAalB,MAVK,MAAMI,KAAKR,KACdA,GAhCyB,kBAmC3BA,EAAO,IAAMA,EACTC,IACFD,GAAQ,MAKRS,QAFc,IAAIC,OAAOV,EAAM,KAG/BK,KAAAA,IAUSM,QAAU,CACrBC,EACAZ,KAEA,MAAMa,GAAUD,EAASH,QAAQH,KAAKN,QAAac,MAAM,GACzD,OAAOF,EAASP,KAAKU,OACnB,CAACC,EAAyBC,EAAKC,KAAOF,EAAKC,GAAOJ,EAAOK,GAAKF"}