{"version":3,"file":"index.min.js","sources":["../src/index.ts"],"sourcesContent":["const MATCH_ALL = '[^/?#]*';\r\n\r\nconst CATCH_ALL = '([^/?#]+)';\r\n\r\n// optional trailing slash\r\n// only matches the slash if nothing follows\r\nconst MATCH_TRAILING_SLASH = '(?:[\\/]?(?=$))?';\r\n\r\n// implements '**' as a wildcard\r\nconst WILDCARD_PATTERN = /\\*\\*/g;\r\n\r\n// matches ':param' and captures 'param'\r\nconst PARAMETER_PATTERN = /:([^\\/]+)/;\r\n\r\nexport interface Compiled {\r\n  pattern: RegExp;\r\n  keys: string[];\r\n}\r\n\r\nexport function compile (\r\n  path: string,\r\n  exact: boolean = false\r\n): Compiled {\r\n  path = (path.split('#')[0] || '').split('?')[0];\r\n  path = path.replace(WILDCARD_PATTERN, MATCH_ALL);\r\n  let keys: string[] = [];\r\n  let match: RegExpExecArray | null;\r\n\r\n  // convert :param to a catch-all group\r\n  // and save the keys\r\n  while ((match = PARAMETER_PATTERN.exec(path)) != null) {\r\n    // match[0] is the entire segment, e. g. ':name'\r\n    path = path.replace(match[0], CATCH_ALL);\r\n    // match[1] is just the name of the parameter, e. g. 'name'\r\n    keys.push(match[1]);\r\n  }\r\n\r\n  if (!/\\/?/.test(path)) {\r\n    path += MATCH_TRAILING_SLASH;\r\n  }\r\n\r\n  path = '^' + path;\r\n  if (exact) {\r\n    path += '$';\r\n  }\r\n\r\n  const pattern = new RegExp(path, 'i');\r\n  return {\r\n    pattern,\r\n    keys\r\n  }\r\n}\r\n\r\nexport interface Executed {\r\n  [key: string]: string;\r\n}\r\n\r\ntype Dictionary<T> = { [key: string]: T };\r\n\r\nexport function execute (\r\n  compiled: Compiled,\r\n  path: string\r\n): Executed {\r\n  const pattern = compiled.pattern;\r\n  const keys = compiled.keys;\r\n  const values = (pattern.exec(path) || []).slice(1);\r\n  return keys.reduce((acc: Dictionary<string>, key, i) => {\r\n    acc[key] = values[i];\r\n    return acc;\r\n  }, {});\r\n}"],"names":["MATCH_ALL","CATCH_ALL","MATCH_TRAILING_SLASH","WILDCARD_PATTERN","PARAMETER_PATTERN","path","exact","split","replace","match","keys","exec","push","test","pattern","RegExp","compiled","values","slice","reduce","acc","key","i"],"mappings":"AAAA,MAAMA,UAAY,UAEZC,UAAY,YAIZC,qBAAuB,iBAGvBC,iBAAmB,QAGnBC,kBAAoB,YAO1B,iBACEC,EACAC,GAAiB,GAGjBD,GADAA,GAAQA,EAAKE,MAAM,KAAK,IAAM,IAAIA,MAAM,KAAK,IACjCC,QAAQL,iBAAkBH,WACtC,IACIS,EADAC,KAKJ,KAAiD,OAAzCD,EAAQL,kBAAkBO,KAAKN,KAErCA,EAAOA,EAAKG,QAAQC,EAAM,GAAIR,WAE9BS,EAAKE,KAAKH,EAAM,IAalB,MAVK,MAAMI,KAAKR,KACdA,GAAQH,sBAGVG,EAAO,IAAMA,EACTC,IACFD,GAAQ,MAKRS,QAFc,IAAIC,OAAOV,EAAM,KAG/BK,KAAAA,GAUJ,iBACEM,EACAX,GAEA,MAAMS,EAAUE,EAASF,QACnBJ,EAAOM,EAASN,KAChBO,GAAUH,EAAQH,KAAKN,QAAaa,MAAM,GAChD,OAAOR,EAAKS,OAAO,CAACC,EAAyBC,EAAKC,KAChDF,EAAIC,GAAOJ,EAAOK,GACXF"}